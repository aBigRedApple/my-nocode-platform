generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(191)
  name      String     @db.VarChar(100)
  password  String     @db.VarChar(255)
  layouts   Layout[]   // 用户创建的项目
  templates Template[] // 用户创建的模板
  favorites Favorite[] // 用户的收藏
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email])
}

model Layout {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String         @db.VarChar(100)
  description String?        @db.VarChar(191)
  content     Json?          // 存储项目内容（与模板内容格式相同）
  boxes       Box[]          // 项目中的盒子
  layoutLinks LayoutTemplate[] // 项目关联的模板
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
}

model Box {
  id         Int         @id @default(autoincrement())
  layoutId   Int
  layout     Layout      @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  positionX  Int         @db.SmallInt
  positionY  Int         @db.SmallInt
  width      String      @default("100%")
  columns    Int         @default(1)      // 列数字段
  sortOrder  Int         @default(0)      // 添加排序字段
  components Component[] // 盒子中的组件
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([layoutId])
}

model Component {
  id          Int      @id @default(autoincrement())
  boxId       Int
  box         Box      @relation(fields: [boxId], references: [id])
  type        String   @db.VarChar(50)
  width       String   @default("100%")
  height      Int      @default(40)
  props       Json?    // 组件属性
  columnIndex Int      @default(0)      // 列索引字段
  sortOrder   Int      @default(0)      // 排序字段
  imageId     Int?     @unique
  image       Image?   @relation(fields: [imageId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([boxId])
  @@index([type])
}

model Image {
  id        Int        @id @default(autoincrement())
  path      String     @db.VarChar(191)
  size      Int?       // 文件大小（可选）
  component Component? // 一对一关系
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([path(100)])
}

model Template {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String?        @db.VarChar(191)
  thumbnail   String?        @db.VarChar(191)
  category    String         @db.VarChar(50)
  userId      Int?           // 创建模板的用户（可选）
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  content     Json?          // 模板预置内容
  layoutLinks LayoutTemplate[] // 模板关联的项目
  favorites   Favorite[]     // 收藏关系
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
  @@index([category])
}

model LayoutTemplate {
  layoutId   Int
  templateId Int
  layout     Layout   @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([layoutId, templateId])
  @@index([layoutId])
  @@index([templateId])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  templateId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, templateId])
  @@index([userId])
  @@index([templateId])
}